{"version":3,"sources":["serviceWorker.js","containers/ErrorBoundary.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","ErrorBoundary","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","errorInfo","setState","react_default","a","createElement","children","React","Component","Card","_ref","id","name","email","className","alt","src","concat","CardList","cats","map","user","components_Card","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","App","onRequestCats","_this$props","isPending","searchField","onSearchChange","filteredCats","filter","cat","toLowerCase","includes","components_SearchBox","components_Scroll","containers_ErrorBoundary","components_CardList","connect","searchCats","requestCats","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateCats","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","objectSpread","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bdfcf301.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({ hasError: true });\r\n    }\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Oops. That is not good.</h1>;\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\n\r\nconst Card = ({ id, name, email }) => {\r\n    return (\r\n        <div className='bg-white dib br3 tc pa3 ma2 grow bw2 shadow-5'>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n            <img alt='cats' src={`https://robohash.org/${id}?set=set4&size=200x200`} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\n\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ cats }) => {\r\n    return (\r\n        <div>\r\n            {\r\n                cats.map(user => \r\n                    <Card key={user.id} id={user.id} name={user.name} email={user.email} />\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n                type='search' \r\n                placeholder='Search Cats' \r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflowY: 'scroll', border: '1px solid black', height: '800px' }}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { setSearchField, requestCats } from \"../actions\";\r\n\r\nimport ErrorBoundary from './ErrorBoundary';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\n\r\nconst mapStateToProps = (state) => ({\r\n    searchField: state.searchCats.searchField,\r\n    cats: state.requestCats.cats,\r\n    isPending: state.requestCats.isPending,\r\n    error: state.requestCats.error\r\n});\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestCats: () => dispatch(requestCats())\r\n});\r\n\r\nclass App extends React.Component {\r\n    componentDidMount() {\r\n        this.props.onRequestCats();\r\n    }\r\n\r\n    render() {\r\n        const { cats, isPending, searchField, onSearchChange } = this.props;\r\n        const filteredCats = cats.filter(cat => {\r\n            return cat.name.toLowerCase().includes(searchField.toLowerCase());\r\n        });\r\n\r\n        return isPending ? <h1>Loading</h1> :\r\n        (\r\n            <div className='tc'>\r\n                <h1 className='f1'>~ CatFriends ~</h1>\r\n                <SearchBox searchChange={onSearchChange} />\r\n                <Scroll>\r\n                    <ErrorBoundary>\r\n                        <CardList cats={filteredCats} />\r\n                    </ErrorBoundary>\r\n                </Scroll>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_CATS_PENDING,\r\n    REQUEST_CATS_SUCCESS,\r\n    REQUEST_CATS_FAILED\r\n} from \"./constants\";\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n});\r\nexport const requestCats = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_CATS_PENDING });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then((data) => dispatch({ type: REQUEST_CATS_SUCCESS, payload: data }))\r\n        .catch((error) => dispatch({ type: REQUEST_CATS_FAILED, payload: error }));\r\n};","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_CATS_PENDING = 'REQUEST_CATS_PENDING';\r\nexport const REQUEST_CATS_SUCCESS = 'REQUEST_CATS_SUCCESS';\r\nexport const REQUEST_CATS_FAILED = 'REQUEST_CATS_FAILED';","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_CATS_PENDING,\r\n    REQUEST_CATS_SUCCESS,\r\n    REQUEST_CATS_FAILED\r\n} from \"./constants\";\r\n\r\nconst initialStateSearch  = {\r\n    searchField: '',\r\n};\r\nexport const searchCats = (state=initialStateSearch, action={}) =>  {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return { ...state, searchField: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst initialStateCats = {\r\n    isPending: false,\r\n    cats: [],\r\n    error: ''\r\n};\r\nexport const requestCats = (state=initialStateCats, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_CATS_PENDING:\r\n            return { ...state, isPending: true };\r\n        case REQUEST_CATS_SUCCESS:\r\n            return { ...state, cats: action.payload, isPending: false };\r\n        case REQUEST_CATS_FAILED:\r\n            return { ...state, error: action.payload, isPending: false };\r\n        default:\r\n            return state;\r\n    }\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from 'redux-thunk';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './containers/App';\n\nimport { searchCats, requestCats } from \"./reducers\";\n\nimport 'tachyons';\nimport './index.css';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchCats, requestCats });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}